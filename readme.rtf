{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww17600\viewh20740\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs46 \cf0 Hello! Here are the patterns I used and where I used them:\
\
Singleton:\
	
\f1\b Class Admin
\f0\b0  (handles admin UI)\
\
Singleton:\
	
\f1\b Class Database
\f0\b0  (allows easy access to all users and groups)\
\
Observer Pattern:\
	
\f1\b Abstract Class Subject
\f0\b0 \
		I made this a class as opposed to an interface so I could write a 		\'92post\'92 method that notified all observers. The User class inherited \
		this. I thought it was a clean way to do it.\
	I
\f1\b nterface Observer\
	Class User
\f0\b0  (child of Subject and implements Observer)\
\
Composite Pattern:\
	
\f1\b Interface Entry\
	Class User 
\f0\b0 (implements Entry)
\f1\b \
	Class Group 
\f0\b0 (implements Entry; has Entry list)
\f1\b \
\

\f0\b0 Visitor Pattern:\
	Visitees (those being visited):\
		
\f1\b Interface Vistee
\f0\b0  (has accept method signature)\
		
\f1\b Interface Entry
\f0\b0  (extends Visitee)\
		
\f1\b Class User
\f0\b0  (implements Entry and thus Visitee)\
		
\f1\b Class Group
\f0\b0  (implements Entry and thus Visitee)\
	Vistor:\
		
\f1\b Interface EntryVistory
\f0\b0  (has visit method signature)\
		
\f1\b Class CountTweetVisitor
\f0\b0  (implements EntryVisitor)\
		
\f1\b Class CountPositiveTweetVisitor
\f0\b0  (implements EntryVisitor)\
		
\f1\b Class CountUser
\f0\b0  (implements EntryVisitor)\
		
\f1\b Class CountGroup
\f0\b0  (implements EntryVisitor)\
	\
Model View Controller Pattern:\
	This was a pattern mentioned in the QA session, and I tried my best to implement 	it in my program. I believe I relatively successful, although I\'92m sure I can further 	optimize it. I have a recursive method in adminPanel \'91addNodes(UserGroup root)\'92 	that when 	given the Root (a UserGroup class) returns a properly structured JTree.\
	As mentioned, I\'92m sure this can be optimized further, but what I have so far was 	really quick and easy to implement and did not add much code.\
	\
\
\
\
\
\
\
\
\
}